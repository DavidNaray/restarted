when units are asked to be deployed at a point, the server knowing the units which wants to be deployed should access the walkMap for the tile, centering on the deployment position, for the number of units asked to be deployed explore at and around the deploy position at offsets, looking for valid points that a user can be placed on (according to the walkMap). I would check that position if its too close to another unit already in the scene but the drift threshold should not be so sensitive, they'll push each other out of collision on the client side.

when units collide a function is called and those units should be repulsed by an amount and at an angle, the amount is known by the server and the client, though, the client sends this float, a radian for the displacement between the two objects for the server to apply for its own records, moving where it expects those units to be on the server by that angle and fixed amount.
This collision communication with the server should only happen with units that collide that are also within a distance to enemy units (that may want to fight and at which point, positions need to be detailed between users), so when this displacement is communicated to the server, that updated position for these units are immediately communicated to the other users to snap units into agreed positions. 

when units collide, one unit does not move, the other is displaced at an angle, this displaced object gets placed into a bucket which holds pairing of angles and moved objects. a function will trigger at intervals which will batch send this update information to the server and then empty the bucket, effectively of form {angle:angle, id:serverServedObjectID,time:timestamp}


when sending the client information for the movement command, itll be the arrays of paths from a starting portal to the end portal, along with the selected pixel point for the movement command. The client will then be required to build the flowfield for the movement. The server will also build a flowfield but to measure where a unit should be at any given time. If the client tampers with the data, they are only screwing themselves over, if they don't, units will more than likely be within an acceptable and believable margin of error.

Server should receive an update when a unit reaches their destination, is blocked, or died etc
if a client selects one of their units and decides to attack another unit then the server will need to be in the loop, apply the pathfinding algorithm to get units within range